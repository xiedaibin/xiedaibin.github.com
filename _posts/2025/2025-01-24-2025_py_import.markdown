---
layout: page
title: Python 中 `from ... import ...` 和 `import ...` 的区别详解
category: 技术
tags: python
---

在 Python 中，我们常常会使用模块来组织代码，而导入模块时，有两种主要的方式：`from ... import ...` 和 `import ...`。然而，它们的使用场景和背后的原理却不尽相同。本文将对此进行详细分析，帮助你理解为何有些模块需要用 `from`，而有些则直接使用 `import`。

---

#### 1. `from ... import ...` 和 `import ...` 的基本区别

- **`from ... import ...`**  
  这种方式用于从一个模块中导入特定的对象（如函数、类、变量等）。  
  示例：
  ```python
  from selenium import webdriver
  ```
  这里的意思是从 `selenium` 模块中导入 `webdriver` 对象。导入后，可以直接使用 `webdriver.Chrome()`。

- **`import ...`**  
  这种方式用于导入整个模块，使用时需要加上模块的名称作为前缀。  
  示例：
  ```python
  import ddddocr
  ```
  这里的意思是导入 `ddddocr` 模块。使用其中的功能时，需要通过 `模块名.对象` 的方式，如 `ddddocr.DdddOcr()`。

---

#### 2. 模块结构的不同

模块的设计决定了它的导入方式。我们以 `selenium` 和 `ddddocr` 为例进行对比。

- **`selenium` 的模块设计**  
  `selenium` 是一个复杂的模块库，它包含多个子模块和包，例如 `webdriver` 是 `selenium` 的一个子模块。因此，我们需要通过 `from selenium import webdriver` 的方式导入特定子模块。

- **`ddddocr` 的模块设计**  
  `ddddocr` 是一个较为简单的模块，所有功能都在模块的顶级命名空间中暴露。我们可以直接 `import ddddocr` 来使用其功能，而不需要从中导入特定对象。

---

#### 3. 两种导入方式的选择

- **使用 `from ... import ...` 的优点**  
  - 代码更简洁，直接导入需要的对象，无需每次都写模块名前缀。
  - 避免了导入不必要的模块内容。
  - 适用于大模块中只需要部分功能的场景。

  示例：
  ```python
  from selenium import webdriver
  driver = webdriver.Chrome()
  ```

- **使用 `import ...` 的优点**  
  - 代码可读性更高，清楚知道对象的来源。
  - 避免与本地命名冲突。
  - 适用于小型模块或需要使用整个模块功能的场景。

  示例：
  ```python
  import ddddocr
  ocr = ddddocr.DdddOcr()
  ```

---

#### 4. 设计上的影响

模块作者的设计决定了使用哪种导入方式。例如：
- 如果模块按照功能划分成多个子模块或包，通常会建议使用 `from ... import ...` 来按需导入子模块的功能。
- 如果模块功能集中在顶级命名空间，通常直接使用 `import ...` 即可。

---

#### 总结

1. **模块设计的复杂度** 是决定导入方式的核心因素。
2. 使用 `from ... import ...` 可以直接导入特定对象，适合大型模块。
3. 使用 `import ...` 可以导入整个模块，适合简单模块。
4. 选择合适的导入方式，不仅能提高代码的可读性和维护性，还能避免不必要的命名冲突。