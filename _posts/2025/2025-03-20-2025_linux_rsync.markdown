---
layout: page
title: 解决 rsync 需要手动输入密码的问题
category: 技术
tags: ssh
---

在使用 `rsync` 进行远程文件同步时，如果每次都需要手动输入密码，可能会影响自动化任务的执行。本文介绍如何通过 **SSH 密钥认证** 实现无密码登录，以及如何应对 `rsync` 过程中遇到的常见错误。

## **一、使用 SSH 密钥认证实现无密码登录**

### **1. 生成 SSH 密钥对**
如果本地机器尚未生成 SSH 密钥对，可以运行以下命令生成：

```bash
ssh-keygen -t rsa -b 4096
```

按回车接受默认设置（或自定义密钥保存路径），可以选择 **不设置 passphrase**（直接回车）以实现无密码登录。

### **2. 复制公钥到远程服务器**
使用 `ssh-copy-id` 将公钥添加到目标服务器：

```bash
ssh-copy-id root@114.55.90.72
```

你需要输入 **一次** `root` 用户的密码，之后公钥会被自动添加到远程服务器的 `~/.ssh/authorized_keys` 文件中。

### **3. 测试无密码 SSH 登录**
执行以下命令测试是否可以无密码登录：

```bash
ssh root@114.55.90.72
```

如果配置成功，你应该无需输入密码就能直接登录到远程服务器。

### **4. 重新运行 rsync**
配置完成后，再次执行 `rsync` 命令，例如：

```bash
rsync -avz /local/path root@114.55.90.72:/remote/path
```

这次应该不会再提示输入密码。

---

## **二、关于 rsync 可能遇到的错误**

在 `rsync` 运行过程中，可能会遇到如下错误：

### **1. rsync error: received SIGINT, SIGTERM, or SIGHUP (code 20)**
这个错误表示同步过程中被意外中断，可能的原因包括：

- 你手动按了 `Ctrl+C`（发送了 `SIGINT`）。
- **网络连接不稳定**，导致 SSH 会话断开。
- **远程服务器主动终止进程**（如超时或资源限制）。

**解决方案：**
- 确保 **网络稳定**，避免 SSH 连接意外中断。
- 在 `rsync` 命令中添加 `--timeout` 参数，例如：

  ```bash
  rsync -avz --timeout=300 /local/path root@114.55.90.72:/remote/path
  ```

  这表示设置 **300 秒超时**，防止因网络波动导致传输中断。

---

## **三、不使用 SSH 密钥的解决方案**

如果不想使用 SSH 密钥认证，也可以选择 **明文密码方式**，但这种方式 **不安全**，不推荐在生产环境中使用。

### **使用 sshpass**
`sshpass` 允许在命令行中直接输入密码（需安装 `sshpass` 工具）：

```bash
sshpass -p "your_password" rsync -avz /local/path root@114.55.90.72:/remote/path
```

⚠ **风险警告**：
- **密码会以明文形式出现在命令行中**，容易被其他用户或日志记录工具获取。
- **不适用于生产环境**，仅适用于临时任务或测试环境。

---

## **四、总结**
为了避免 `rsync` 每次都需要手动输入密码，建议使用 **SSH 密钥认证** 来实现无密码登录。同时，如果遇到 `rsync` 传输中断的问题，可以使用 `--timeout` 参数来减少网络波动的影响。如果无法使用 SSH 密钥，也可以选择 `sshpass`，但请注意安全风险。

通过上述方法，你可以更高效、自动化地使用 `rsync` 进行远程文件同步。
