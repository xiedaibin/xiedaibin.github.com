---
layout: page
title: 我的2019年总结
category: 总结
tags: 技术
---
{% include JB/setup %}
　　又到一年年底了，时间慢得时候总觉得无奈，快得时候又有些让我们措手不及。比如现在，又一年了，我又学到什么了呢，又有那些需要改进得地方呢，回顾下吧。

* 工作 
## 工作
&#160; &#160; &#160; &#160;这是来茂日这个大家庭中得第二年，从去年5月份到现在已经1年半了。从最开始对公司了解甚少到现在已经比较了解公司得业务以及文化了。公司得业务是比较简单的，就是通过互联网技术去提升垂直领域得效率，帮助客户（商家）更快更高效得管理自己得店铺。算是工具类得产品，是做2B得生意。公司得核心是给客户提供对店铺员工，商品，钱(人，物,钱)有效管理得解决方案,落实到具体场景就是顾客来店消费，通过系统将消费记录在系统中，通过系统计算员工的业绩，查看运营报表等等。其实这样的系统很早就有但是以前多半是单机版得，很难互通与复用也不利于传播。为什么我们能活下来并发展起来很重要的原因是我们抓住了服务化得浪潮以及改变了原有得销售途径。在我来公司之前，将软件放在淘宝上买我是想都没想过得，但来到公司之后，发现公司完全是靠线上售卖软件而且卖得很好，对我来说算是认知上的颠覆。还有就是将以前得很普通的收银系统华丽得转变为线上得店铺管理服务，这将我们公司变成了服务提供商而不仅仅是一个软件制造商。这里代来得好处不是一点点，一是现金流将会非常得稳定，存量店铺将会给我们公司代来很稳定得现金流。二是，作为服务商能更快得了解到客户得需求，持续改进我们得产品，这将让我们有更强得生命力。当然还有其他很多很多好处我就不说了。我为什么花了很大篇幅来谈我眼中得公司，那是因为我觉得要是我在一家公司还不知道公司是怎么赚钱得那就太可悲了。好了，现在说说我的具体工作吧。
&#160; &#160; &#160; &#160;我的工作基本在去年年底就调整到新成立得车聚集事业部，从事汽车店铺管理软件得后端研发。汽车店铺管理软件从原来得美业店铺管理系统中独立出来是因为汽车行业有很多其行业得特殊性，独立研发能更贴切汽车业务为汽车门店用户提供更优得服务。这块业务在我来之前已经研发了一款产品，但到运营阶段并不理想，最主要得还是过多依赖原有得设计导致并不太满足汽车门店。所以大刀阔斧，重头开始。新的车聚集经过去年年底到今年年初得招兵买马重整旗鼓又开始新的征程了。
&#160; &#160; &#160; &#160;先说说成果吧，车聚集1.0版在10月份末正式上线，到年底已经有10个左右得付费用户。从结果来说还是不错得，毕竟有用户付费购买那就说明是有价值得。
&#160; &#160; &#160; &#160;再说说产品吧，我们得产品策略以APP优先，放弃了原有得web优先，这次我们研发得产品选择App为主，web为辅得形式。类似于钉钉，我们得主要工作全部都是在App上处理，部分管理员设置，报表等等放在web中处理。权限那块也是仿照钉钉，在购买应用后直接分配给店员。整个应用分为基础套装得应用和增值应用，基础套装是年费制得，增值应用是有需求再单独购买，基本满足按需购买的原则，让用户有更多的自主性。需求上今年有两次比较大的纷争，一次是基础套装免费还是收费，后来基于运营成本得考虑选择收费。一次是增对IOS对虚拟商品必须走苹果支付并支付苹果30%得服务费得限制(我们卖得应用理论上是虚拟商品)进行得虚拟币设计，虚拟币这块类似于喜马拉雅喜币那样得设计，这样的设计也让我们花费了很多时间。但后来我们直接没有走虚拟币得方案去苹果审核审核通过后，我们就关闭了虚拟币得解决方案。
&#160; &#160; &#160; &#160;再谈谈技术吧，这块比较枯燥就放最后吧。最近这几年微服务很流行，我们公司也在去年年底开始在公司进行项目微服务得升级。但我更喜欢把它叫做服务化得升级，并不一定要很微。因为这次升级我们并没有将核心业务进行拆解。主要原因是汽车业务这块我们现在也是在探索中可变因素很大，微服务化会加大系统之间调用的复杂度，这对业务还不明朗，可变因素极多的0-1得转变中是得不偿失得。不过我们依然对很多业务外部可统一得逻辑进行了服务化。比如统一的用户管理，统一的认证授权，统一的支付调用，统一的短信发送，统一的消息通知，统一的http任务调度等进行了服务化。服务化有极大得好处，它将更加得公有化，不仅仅为我们部门提供服务，也可以为其他需要使用相同业务的部门提供服务，节省重复研发得成本。二是，调用放不用关心实现逻辑只要调用就好，这样怎个系统架构就如搭积木一样可以一层层累积起来了。技术上面得变革也主要是两个，一个是开发框架从Framework转到.net core，一个是部署平台从windows server 转到docker。这一块得变革还算比较顺利，应为除了原有部分服务如支付服务，短信服务等是从Framework 升级之外，其他得多半都是基于.net core重新开发的。由于.net core 本身得跨平台特性部署在docker上也是很方便得。现在已经将所有使用得服务都跑在docker上，这就为我们得devops又进了一步。devops得尝试。随着对docker更进一步的了解，就加深了对devops得兴趣，在docker之前自动化部署还是比较吃力得，原因就是和运行环境强依赖导致，即使是在部署都可能出现意想不到得问题。现在docker隔离出一个迷你得运行环境，使我们可以将运行程序和运行环境打包再一起，就可以完全不考虑运行在什么平台上了。我们走出得第一步是要将开发部署自动化。首先说说在未使用docker技术之前我们是怎么部署的吧。每次后端API服务写好之后，登录到开发服务器，然后部署项目到IIS上。下一次有更新，就又登录到开发服务器，部署部署项目到IIS，周而复始。这在API相对小得时候没什么，但是API多的时候就很麻烦。现在我们怎么做呢。我们通过阿里得镜像服务，每次代码更新到代码服务器，都会重新生成镜像。镜像服务器上配置好触发器，每次镜像生成完毕都会通知开发服务器上面得jenkins,jenkins收到通知后拉取相关生成好的镜像。然后停止容器，根据镜像重新生成容器并启动。整个链条不需要人为参与，开发人员只需要提交代码就能自动触发部署了。而且由于镜像是镜像服务端生成好的，开发服务器重新拉取镜像并发布只需要数秒时间，基本不影响前端调用。当然我们也尝试了在服务重启过程中发送钉钉通知，不过大家嫌太吵给关了。
&#160; &#160; &#160; &#160;再说说我自己吧，挺忙得，一方面自己本来就不是能闲下来得人，一方面，从0-1得过程本来有很多事情需要处理。工作上除了好些外围服务需要我维护之外，很多新的功能需求，业务需求都需要去设计去实现。对自己在工作上的表现还算满意。就是对自己在技术上得积累不够满意。希望自己能在今年掌握得有好些技术都只开了个头就没有继续再深入下去了。说明自己在个人学习时间把控上还是很欠缺得这些都要补上。和团队相处还算融洽。虽然偶有争吵也多半是希望我们得产品，团队能够更好。

## 学习
　　
## 其他
　