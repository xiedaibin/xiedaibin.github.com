---
layout: page
title: ReadOnlySpan<char>和string有什么区别
category: 技术
tags: C#
---

`ReadOnlySpan<char>` 和 `string` 都用于表示字符序列，但它们在设计和用途上有一些显著的区别。以下是这两者的主要区别：

### 1. **内存管理方式**

- **`string`**：
  - `string` 是一种引用类型，表示一个不可变的字符序列。它在内存中存储为一个字符数组，并且是 **不可变** 的。这意味着一旦创建，`string` 的内容无法被修改。
  - `string` 采用 **托管内存**（Heap）来存储数据，因此访问速度会略慢一些，因为涉及到垃圾回收（GC）和内存分配。

- **`ReadOnlySpan<char>`**：
  - `ReadOnlySpan<char>` 是一种结构体类型，表示一个只读的、可在栈上分配的字符序列，它本身并不包含实际的字符数据。`ReadOnlySpan` 是 **轻量级的**，它只是一个引用，指向存储数据的内存区域，可以是堆内存、栈内存或其他地方（如数组、`Memory<T>`、`string` 等）。
  - `ReadOnlySpan<char>` 通常不涉及垃圾回收，因此其性能比 `string` 更加高效，尤其是在需要处理大量数据时。

### 2. **可变性**

- **`string`**：不可变的。一旦 `string` 被创建，你无法修改它的内容。任何对 `string` 的操作（如拼接、替换等）都会生成一个新的 `string` 实例。

- **`ReadOnlySpan<char>`**：是只读的，但它指向的底层数据可以是可变的。例如，你可以用 `ReadOnlySpan<char>` 查看一个 `string` 或字符数组中的内容，但不能修改其数据（因此是“只读”）。不过，如果底层数据是可变的（例如 `char[]`），你仍然可以修改该底层数组，但这并不会影响 `ReadOnlySpan<char>` 本身的内容。

### 3. **性能和用途**

- **`string`**：由于 `string` 是托管的不可变对象，每次对 `string` 进行修改（如拼接、替换等）时，都会创建新的 `string` 实例。这会导致额外的内存分配和性能开销。`string` 更适合用于存储固定、不可变的文本数据，或需要进行复杂字符串操作（例如格式化、替换、查找）的场景。

- **`ReadOnlySpan<char>`**：由于是轻量级的结构体，并且支持栈分配，因此在性能上相较于 `string` 更加高效。`ReadOnlySpan<char>` 适合用于高效地处理大量数据、避免内存分配、以及对内存进行查看或操作的场景。它非常适合用于性能敏感的代码，例如处理大型文本文件、字符串查找、解析等。

### 4. **内存分配**

- **`string`**：总是分配在 **堆内存** 上，且由于不可变性，字符串数据一旦创建就不能更改。如果你需要对 `string` 进行拼接或更改内容，通常会创建新的 `string` 对象。

- **`ReadOnlySpan<char>`**：不进行内存分配，它只是对现有数据的引用。`ReadOnlySpan` 允许你高效地引用堆内存、栈内存、`string` 数据等的片段，并进行处理，但本身不会额外分配内存。这使得它在处理大量数据时特别高效。

### 5. **类型安全和限制**

- **`string`**：
  - `string` 是一个类，具有许多内置方法，如 `Substring()`、`Contains()`、`Replace()` 等，提供了丰富的字符串操作功能。
  - `string` 的内容始终是字符序列，且与其他类型不易互操作。
  
- **`ReadOnlySpan<char>`**：
  - `ReadOnlySpan<char>` 是一个结构体，具有一些与数组类似的方法，如 `Slice()`、`ToArray()`、`ToString()` 等，但它本身并不持有数据，而是通过指针进行引用。
  - `ReadOnlySpan<char>` 对字符串或字符数组的访问是只读的，且其生命周期仅限于作用域内，因此它更适合用于临时处理和高效访问内存数据。

### 6. **兼容性和转换**

- **`string`**：
  - 可以很容易地与其他类型（如 `char[]`）进行转换。例如，可以通过 `ToCharArray()` 方法将 `string` 转换为字符数组，反之亦然。
  - 由于 `string` 是不可变的，它更适合用于持久化存储和传递不可更改的数据。

- **`ReadOnlySpan<char>`**：
  - 可以方便地从 `string` 或 `char[]` 创建。例如，`ReadOnlySpan<char>` 可以通过 `new ReadOnlySpan<char>(string)` 或 `new ReadOnlySpan<char>(char[])` 来创建。
  - 它可以被用来查看和处理 `string` 或字符数组中的子序列，但并不支持与其他类型直接转换为新的内存区域。

### 7. **示例**

#### 7.1 **`string` 示例：**

```csharp
string str = "Hello, world!";
string substring = str.Substring(0, 5);  // 获取 "Hello"
Console.WriteLine(substring);
```

#### 7.2 **`ReadOnlySpan<char>` 示例：**

```csharp
string str = "Hello, world!";
ReadOnlySpan<char> span = new ReadOnlySpan<char>(str.ToCharArray());
ReadOnlySpan<char> slice = span.Slice(0, 5);  // 获取 "Hello"
Console.WriteLine(slice.ToString());
```

### 8. **总结**

| 特性                         | `string`                             | `ReadOnlySpan<char>`                     |
|------------------------------|--------------------------------------|------------------------------------------|
| **内存分配**                  | 堆内存                               | 无内存分配，引用现有数据                |
| **可变性**                    | 不可变                               | 只读（但可以引用可变数据）             |
| **性能**                      | 较低，涉及额外的内存分配和 GC 开销   | 更高效，适合性能敏感的场景             |
| **生命周期**                  | 在堆上存在                           | 受作用域限制，生命周期较短             |
| **转换**                      | 可以方便地转换为 `char[]` 或其他类型 | 可以通过 `ToArray` 转换为数组           |
| **使用场景**                  | 适用于存储和操作文本数据             | 适用于需要高效处理和查看内存数据的场景 |

总体来说，`string` 适用于存储和处理不可变文本数据，而 `ReadOnlySpan<char>` 更适用于性能要求较高的场景，尤其是当你需要避免额外的内存分配时。选择哪种类型，取决于你的具体需求：如果你需要频繁地修改字符串内容或使用 `string` 特有的操作方法，`string` 是更合适的选择；如果你更关注性能，特别是在处理大数据或需要高效访问内存时，`ReadOnlySpan<char>` 会是更好的选择。
